{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap dbdb3fd0a9f4344e877e","webpack:///./threenodes/Core.coffee","webpack:///./threenodes/nodes/collections/Nodes.coffee","webpack:///external \"_\"","webpack:///external \"Backbone\"","webpack:///./threenodes/utils/Indexer.coffee","webpack:///./threenodes/connections/collections/Connections.coffee","webpack:///./threenodes/connections/models/Connection.coffee","webpack:///./threenodes/collections/GroupDefinitions.coffee","webpack:///./threenodes/models/GroupDefinition.coffee","webpack:///./threenodes/utils/Utils.coffee"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAAA,SAAQ,oBAAQ,CAAR;;AACR,oBAAmB,oBAAQ,CAAR;;AAMb;GACJ,IAAC,OAAD,GAAS;KAAC,QAAO,EAAR;KAAY,OAAO,EAAnB;;;GACT,IAAC,MAAD,GAAQ;KAAC,QAAQ,EAAT;KAAa,OAAO,EAApB;;;GAEK,cAAC,OAAD;AAEX;KAAA,WACE;OAAA,MAAM,KAAN;OACA,aAAa,KADb;OAEA,WAAW,IAFX;;KAGF,IAAC,SAAD,GAAY,CAAC,CAAC,MAAF,CAAS,EAAT,EAAa,QAAb,EAAuB,OAAvB;KAGZ,IAAC,kBAAD,GAAqB,IAAI,gBAAJ,CAAqB,EAArB;KACrB,IAAC,MAAD,GAAS,IAAI,KAAJ,CAAU,EAAV,EAAc;OAAC,UAAU,IAAC,SAAZ;MAAd;KAGT,IAAC,kBAAiB,CAAC,IAAnB,CAAwB,oBAAxB,EAA8C,IAAC,MAAK,CAAC,WAArD;KAGA,IAAC,kBAAiB,CAAC,IAAnB,CAAwB,QAAxB,EAAkC,IAAC,MAAK,CAAC,wBAAzC;GAhBW;;GAkBb,IAAC,aAAD,GAAe,SAAC,SAAD,EAAY,KAAZ;KACb,IAAI,CAAC,MAAM,CAAC,MAAO,WAAnB,GAAgC;AAChC,YAAO;GAFM;;GAIf,IAAC,aAAD,GAAe,SAAC,SAAD,EAAY,SAAZ;KACb,IAAI,CAAC,MAAM,CAAC,KAAM,WAAlB,GAA+B;AAC/B,YAAO;GAFM;;GAIf,IAAC,YAAD,GAAc,SAAC,QAAD,EAAW,QAAX;KACZ,IAAI,CAAC,KAAK,CAAC,MAAO,UAAlB,GAA8B;AAC9B,YAAO;GAFK;;GAId,IAAC,YAAD,GAAc,SAAC,QAAD,EAAW,QAAX;KACZ,IAAI,CAAC,KAAK,CAAC,KAAM,UAAjB,GAA6B;AAC7B,YAAO;GAFK;;kBAId,WAAU,SAAC,WAAD;AACR;KAAA,IAAC,MAAK,CAAC,SAAP;KAEA,IAAG,WAAW,CAAC,MAAf;AACE;AAAA;;SACE,IAAC,kBAAiB,CAAC,MAAnB,CAA0B,OAA1B;AADF,QADF;;AAKA;AAAA;;OACE,IAAG,IAAI,CAAC,IAAL,KAAa,OAAhB;SAEE,IAAC,MAAK,CAAC,UAAP,CAAkB,IAAlB,EAFF;QAAA;SAKE,MAAM,IAAC,kBAAiB,CAAC,QAAnB,CAA4B,IAAI,CAAC,aAAjC;SACN,IAAG,GAAH;WACE,IAAI,CAAC,UAAL,GAAkB;WAClB,MAAM,IAAC,MAAK,CAAC,WAAP,CAAmB,IAAnB,EAFR;UAAA;WAIE,OAAO,CAAC,GAAR,CAAY,qCAAmC,IAAI,CAAC,aAApD,EAJF;UANF;;AADF;AAcA;AAAA;;OACE,IAAC,MAAK,CAAC,0BAAP,CAAkC,UAAlC;AADF;KAGA,IAAC,MAAK,CAAC,OAAO,CAAC,GAAf,GAAqB,WAAW,CAAC;KACjC,QAAQ,SAAC,EAAD,EAAK,IAAL;cAAc,WAAW,IAAX,EAAiB,EAAjB;KAAd;YACR,MAAM,CAAN,EAAS;cAAA;gBAAG,KAAC,MAAK,CAAC,oBAAP;OAAH;KAAA,QAAT;GA3BQ;;;;;;AA6BZ,OAAM,CAAC,OAAP,GAAiB;;;;;;;AC1EjB;GAAA;;;;AAAA,KAAI,oBAAQ,CAAR;;AACJ,YAAW,oBAAQ,CAAR;;AACX,WAAU,oBAAQ,CAAR;;AACV,eAAc,oBAAQ,CAAR;;AAER;;;;;;;;;;;;;;;;;;;;;;mBAEJ,aAAY,SAAC,MAAD,EAAS,OAAT;AACV;KAAA,IAAC,SAAD,GAAY,OAAO,CAAC;KACpB,OAAO;KAEP,IAAC,UAAD,GAAa;KAGb,IAAC,QAAD,GAAW,IAAI,OAAJ;KAGX,IAAC,YAAD,GAAe,IAAI,WAAJ,CAAgB,EAAhB,EAAoB;OAAC,SAAS,IAAC,QAAX;MAApB;KAGf,IAAC,OAAD,GAAU,OAAO,CAAC;KAElB,IAAC,YAAW,CAAC,IAAb,CAAkB,KAAlB,EAAyB,SAAC,UAAD;cACvB,IAAI,CAAC,OAAL,CAAa,mBAAb,EAAkC,IAAlC;KADuB,CAAzB;KAGA,IAAC,KAAD,CAAM,QAAN,EAAgB;cAAA,SAAC,IAAD;AACd;SAAA,OAAO,KAAC,UAAS,CAAC,OAAX,CAAmB,IAAnB;SACP,IAAG,SAAQ,CAAC,CAAZ;WACE,KAAC,UAAS,CAAC,MAAX,CAAkB,IAAlB,EAAwB,CAAxB,EADF;;gBAEA,IAAI,CAAC,OAAL,CAAa,mBAAb,EAAkC,IAAlC;OAJc;KAAA,QAAhB;KAMA,IAAC,KAAD,CAAM,mBAAN,EAA2B;cAAA;AACzB;AAAA;AAAA;cAAA;;wBACE,IAAI,CAAC,aAAL;AADF;;OADyB;KAAA,QAA3B;KAIA,IAAC,YAAW,CAAC,IAAb,CAAkB,QAAlB,EAA4B,SAAC,UAAD;cAC1B,IAAI,CAAC,OAAL,CAAa,mBAAb,EAAkC,IAAlC;KAD0B,CAA5B;KAGA,IAAC,KAAD,CAAM,KAAN,EAAa,SAAC,IAAD;OACX,IAAG,IAAI,CAAC,WAAL,IAAoB,IAAI,CAAC,WAAL,KAAoB,IAA3C;SACE,IAAC,UAAS,CAAC,IAAX,CAAgB,IAAhB,EADF;;cAGA,IAAI,CAAC,OAAL,CAAa,mBAAb,EAAkC,IAAlC;KAJW,CAAb;YAMA,IAAC,KAAD,CAAM,kBAAN,EAA0B;cAAA,SAAC,MAAD,EAAS,MAAT;gBACxB,KAAC,YAAW,CAAC,MAAb,CACE;WAAA,YAAY,MAAZ;WACA,UAAU,MADV;UADF;OADwB;KAAA,QAA1B;GArCU;;mBA0CZ,iBAAgB;KACd,IAAC,kBAAD;KACA,IAAC,UAAD;KACA,EAAE,sBAAF,CAAyB,CAAC,MAA1B;KACA,IAAC,UAAD,GAAa;KACb,IAAC,QAAO,CAAC,KAAT;AACA,YAAO;GANO;;mBAQhB,UAAS;KACP,IAAC,kBAAD;KACA,IAAC,UAAD;KACA,OAAO,IAAC;KACR,OAAO,IAAC;YACR,OAAO,IAAC;GALD;;mBAOT,qBAAoB,SAAC,QAAD;KAClB,IAAG,IAAC,SAAJ;OACE,IAAC,SAAQ,CAAC,GAAV,CAAc,gBAAd,EAAgC,IAAC,mBAAjC;OACA,IAAC,SAAQ,CAAC,GAAV,CAAc,YAAd,EAA4B,IAAC,WAA7B;OACA,IAAC,SAAQ,CAAC,GAAV,CAAc,WAAd,EAA2B,IAAC,UAA5B,EAHF;;KAKA,IAAC,SAAD,GAAY;KACZ,IAAC,SAAQ,CAAC,EAAV,CAAa,gBAAb,EAA+B,IAAC,mBAAhC;KACA,IAAC,SAAQ,CAAC,EAAV,CAAa,YAAb,EAA2B,IAAC,WAA5B;YACA,IAAC,SAAQ,CAAC,EAAV,CAAa,WAAb,EAA0B,IAAC,UAA3B;GATkB;;mBAWpB,OAAM,SAAC,SAAD;AACJ,YAAO,IAAI,CAAC,KAAL,CAAW;OAAC,MAAM,SAAP;MAAX;GADH;;mBAGN,aAAY,SAAC,OAAD;AAEV;KAAA,IAAG,CAAC,CAAC,IAAF,CAAO,OAAP,MAAmB,QAAtB;OACE,UAAU;SAAC,MAAM,OAAP;SADZ;;KAIA,OAAO,CAAC,QAAR,GAAmB,IAAC;KACpB,OAAO,CAAC,QAAR,GAAmB,IAAC;KAGpB,OAAO,CAAC,OAAR,GAAkB,IAAC;KAEnB,OAAO,CAAC,MAAR,GAAiB,IAAC;KAGlB,IAAG,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,MAAO,QAAO,CAAC,IAAR,CAAjC;OACE,OAAO,CAAC,KAAR,CAAc,+BAA+B,OAAO,CAAC,IAArD;AACA,cAAO,MAFT;;KAKA,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,MAAO,QAAO,CAAC,IAAR,CAAjC,CAA+C,OAA/C;KAGJ,IAAC,IAAD,CAAK,CAAL;YACA;GAxBU;;mBA0BZ,SAAQ;AAEN;KAAA,eAAe;KACf,gBAAgB;KAKhB,kBAAkB,SAAC,KAAD;AAChB;AAAA;YAAA;;SACE,IAAG,IAAI,CAAC,gBAAL,OAA2B,KAA3B,IAAoC,IAAI,CAAC,aAAzC,IAA0D,IAAI,CAAC,aAAlE;WACE,aAAc,KAAI,CAAC,UAAW,OAAhB,GAAyB,GAAzB,GAA+B,IAAI,CAAC,UAAW,OAA/C,CAAd,GAAuE,KADzE;;SAEA,YAAa,KAAI,CAAC,UAAW,OAAhB,GAAyB,GAAzB,GAA+B,IAAI,CAAC,UAAW,OAA/C,CAAb,GAAsE;SACtE,IAAG,IAAI,CAAC,KAAR;wBACE,gBAAgB,IAAI,CAAC,KAAK,CAAC,MAA3B,GADF;UAAA;gCAAA;;AAJF;;KADgB;KAOlB,gBAAgB,IAAC,OAAjB;KAGA,mBAAmB,SAAC,IAAD;AACjB;OAAA,gBAAgB,IAAI,CAAC,gBAAL;AAChB;;SACE,IAAG,YAAa,OAAM,CAAC,UAAW,OAAlB,GAA2B,GAA3B,GAAiC,MAAM,CAAC,UAAW,OAAnD,CAAb,IAA2E,CAAC,MAAM,CAAC,aAAtF;WACE,iBAAiB,MAAjB,EADF;;AADF;OAGA,IAAG,IAAI,CAAC,KAAL,IAAc,IAAI,CAAC,aAAtB;SACE,IAAI,CAAC,OAAL;SACA,IAAI,CAAC,KAAL,GAAa;SACb,IAAI,CAAC,MAAM,CAAC,sBAAZ,GAHF;;OAKA,OAAO,YAAa,KAAI,CAAC,UAAW,OAAhB,GAAyB,GAAzB,GAA+B,IAAI,CAAC,UAAW,OAA/C;cACpB;KAXiB;AAcnB;OACE,IAAG,YAAa,KAAhB;SACE,iBAAiB,aAAc,KAA/B,EADF;;AADF;YAGA;GAnCM;;mBAqCR,6BAA4B,SAAC,UAAD;AAE1B;KAAA,WAAc,UAAU,CAAC,aAAd,GAAiC,UAAU,CAAC,aAAa,CAAC,QAAzB,EAAjC,GAA0E;KACrF,YAAY,IAAC,aAAD,CAAc,UAAU,CAAC,SAAS,CAAC,QAArB,EAAd,EAA+C,QAA/C;KACZ,OAAO,SAAS,CAAC,MAAM,CAAC,OAAQ,WAAU,CAAC,IAAI,CAAC,QAAhB;KAChC,SAAY,UAAU,CAAC,WAAd,GAA+B,UAAU,CAAC,WAAW,CAAC,QAAvB,EAA/B,GAAsE;KAC/E,UAAU,IAAC,aAAD,CAAc,UAAU,CAAC,OAAO,CAAC,QAAnB,EAAd,EAA6C,MAA7C;KACV,KAAK,OAAO,CAAC,MAAM,CAAC,MAAO,WAAU,CAAC,EAAE,CAAC,QAAd;KAG3B,IAAG,CAAC,IAAD,IAAS,CAAC,EAAb;OACE,MAAM;OACN,YAAY;OACZ,UAAU;OACV,OAAO,SAAS,CAAC,MAAM,CAAC,OAAQ,WAAU,CAAC,EAAE,CAAC,QAAd;OAChC,KAAK,OAAO,CAAC,MAAM,CAAC,MAAO,WAAU,CAAC,IAAI,CAAC,QAAhB,IAL7B;;KAOA,IAAI,IAAC,YAAW,CAAC,MAAb,CACA;OAAA,YAAY,IAAZ;OACA,UAAU,EADV;OAEA,KAAK,UAAU,CAAC,EAFhB;MADA;YAKJ;GAtB0B;;mBAwB5B,cAAa,SAAC,KAAD,EAAQ,gBAAR;AAEX;;OAFmB,mBAAmB;;KAEtC,MAAM,IAAC,WAAD,CAAY,KAAZ;AAGN;;OACE,OAAO;OACP,KAAK;OACL,IAAG,UAAU,CAAC,WAAd;SACE,OAAO,IAAC,aAAD,CAAc,UAAU,CAAC,SAAzB,CAAmC,CAAC,MAAM,CAAC,QAA3C,CAAoD,UAAU,CAAC,IAA/D,EAAqE,IAArE;SACP,cAAc,IAAC,aAAD,CAAc,UAAU,CAAC,OAAzB;SACd,IAAG,WAAH;WACE,KAAK,WAAW,CAAC,MAAM,CAAC,QAAnB,CAA4B,UAAU,CAAC,EAAvC,EAA2C,KAA3C,EADP;UAHF;QAAA;SAME,cAAc,IAAC,aAAD,CAAc,UAAU,CAAC,SAAzB;SACd,IAAG,WAAH;WACE,OAAO,WAAW,CAAC,MAAM,CAAC,QAAnB,CAA4B,UAAU,CAAC,IAAvC,EAA6C,IAA7C,EADT;;SAEA,KAAK,IAAC,aAAD,CAAc,UAAU,CAAC,OAAzB,CAAiC,CAAC,MAAM,CAAC,QAAzC,CAAkD,UAAU,CAAC,EAA7D,EATP;;OAWA,IAAI,IAAC,YAAW,CAAC,MAAb,CACF;SAAA,YAAY,IAAZ;SACA,UAAU,EADV;QADE;AAdN;AAkBA,YAAO;GAvBI;;mBAyBb,2BAA0B,SAAC,GAAD;AACxB;KAAA,SAAS,IAAC,OAAM,CAAC,MAAR;YACT,CAAC,CAAC,IAAF,CAAO,MAAP,EAAe,SAAC,IAAD;OAAU,IAAG,IAAI,CAAC,UAAL,IAAmB,IAAI,CAAC,UAAU,CAAC,GAAhB,KAAuB,GAAG,CAAC,GAAjD;gBAA0D,IAAI,CAAC,MAAL,GAA1D;;KAAV,CAAf;GAFwB;;mBAI1B,uBAAsB;YACpB,IAAC,YAAW,CAAC,MAAb;GADoB;;mBAGtB,mBAAkB,SAAC,CAAD;YAChB,IAAC,YAAW,CAAC,MAAb,CAAoB,CAApB;GADgB;;mBAGlB,eAAc,SAAC,GAAD,EAAM,GAAN;AACZ;;OADkB,MAAM;;AACxB;AAAA;;OACE,IAAG,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,CAAC,QAAhB,OAA8B,GAAG,CAAC,QAAJ,EAAjC;SACE,IAAG,QAAO,IAAP,IAAe,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,CAAC,QAAhB,OAA8B,GAAG,CAAC,QAAJ,EAAhD;AACE,kBAAO,KADT;UADF;;OAIA,IAAG,IAAI,CAAC,KAAR;SACE,MAAM,IAAI,CAAC,KAAK,CAAC,YAAX,CAAwB,GAAxB,EAA6B,GAA7B;SACN,IAAG,GAAH;AAAY,kBAAO,IAAnB;UAFF;;AALF;AASA,YAAO;GAVK;;mBAYd,qBAAoB;YAClB,IAAC,OAAD,CAAQ,mBAAR;GADkB;;mBAGpB,aAAY,SAAC,IAAD;YACV,IAAC,KAAD,CAAM,SAAC,IAAD;OAAU,IAAG,IAAI,CAAC,SAAL,YAA0B,QAA7B;gBAA2C,IAAI,CAAC,SAAL,CAAe,IAAf,EAA3C;;KAAV,CAAN;GADU;;mBAGZ,YAAW;YACT,IAAC,KAAD,CAAM,SAAC,IAAD;OAAU,IAAG,IAAI,CAAC,SAAL,YAA0B,QAA7B;gBAA2C,IAAI,CAAC,SAAL,GAA3C;;KAAV,CAAN;GADS;;mBAGX,sBAAqB;AACnB;AAAA;AAAA;UAAA;;oBACE,EAAE,IAAF,CAAO,CAAC,IAAR,CAAa,QAAb,CAAsB,CAAC,MAAvB;AADF;;GADmB;;mBAIrB,YAAW;AACT;KAAA,EAAE,gBAAF,CAAmB,CAAC,IAApB,CAAyB,EAAzB;KACA,SAAS,IAAC,OAAM,CAAC,MAAR;KACT,CAAC,CAAC,MAAF,CAAS,MAAT,EAAiB,QAAjB;KACA,IAAC,MAAD,CAAO,EAAP;YACA;GALS;;mBAOX,oBAAmB;YACjB,IAAC,YAAW,CAAC,SAAb;GADiB;;;;IAnOD,QAAQ,CAAC;;AAsO7B,OAAM,CAAC,OAAP,GAAiB;;;;;;;AC3OjB,gD;;;;;;ACAA,gD;;;;;;ACAA;;AAAM;GACS;KAEX,IAAC,IAAD,GAAO;GAFI;;qBAIb,SAAQ,SAAC,SAAD;;OAAC,YAAY;;KACnB,IAAG,SAAH;AACE,cAAO,IAAC,IAAD,IAAQ,EADjB;MAAA;AAGE,cAAO,IAAC,KAHV;;GADM;;qBAMR,QAAO;YACL,IAAC,IAAD,GAAO;GADF;;;;;;AAGT,OAAM,CAAC,OAAP,GAAiB;;;;;;;ACdjB;GAAA;;;;AAAA,YAAW,oBAAQ,CAAR;;AACX,cAAa,oBAAQ,CAAR;;AAEP;;;;;;;;;;;yBACJ,QAAO;;yBAEP,aAAY,SAAC,MAAD,EAAS,OAAT;KACV,IAAC,QAAD,GAAW,OAAO,CAAC;KACnB,IAAC,KAAD,CAAM,oBAAN,EAA4B;cAAA,SAAC,CAAD;gBAAO,KAAC,OAAD,CAAQ,CAAR;OAAP;KAAA,QAA5B;YACA;GAHU;;yBAKZ,SAAQ;YACN,IAAC,KAAD,CAAM,SAAC,CAAD;cAAO,CAAC,CAAC,MAAF;KAAP,CAAN;GADM;;yBAGR,SAAQ,SAAC,KAAD,EAAQ,OAAR;KACN,IAAG,CAAC,OAAJ;OAAiB,UAAU,GAA3B;;KACA,KAAK,CAAC,OAAN,GAAgB,IAAC;KACjB,QAAQ,IAAC,cAAD,CAAe,KAAf,EAAsB,OAAtB;KACR,IAAG,CAAC,KAAJ;AACE,cAAO,MADT;;KAEA,IAAC,IAAD,CAAK,KAAL,EAAY,OAAZ;AACA,YAAO;GAPD;;yBASR,YAAW;YACT,IAAC,OAAD,CAAQ,IAAC,OAAT;GADS;;;;IApBa,QAAQ,CAAC;;AAuBnC,OAAM,CAAC,OAAP,GAAiB;;;;;;;AC1BjB;GAAA;;;;AAAA,YAAW,oBAAQ,CAAR;;AACX,WAAU,oBAAQ,CAAR;;;AAEV;;AACM;;;;;;;;;;;;;GAEJ,UAAC,eAAD,GAAiB,IAAI,OAAJ;;wBAEjB,WACE;KAAA,OAAO,CAAC,CAAR;;;wBAEF,OAAM;;wBAEN,aAAY,SAAC,OAAD;AACV;KAAA,IAAC,QAAD,GAAW;KACX,UAAU,OAAO,CAAC,OAAR,IAAmB,UAAU,CAAC;KAGxC,IAAG,IAAC,IAAD,CAAK,KAAL,MAAe,CAAC,CAAnB;OAA0B,IAAC,IAAD,CAAK;SAAC,OAAO,OAAO,CAAC,MAAR,EAAR;QAAL,EAA1B;;KAEA,IAAG,IAAC,QAAD,EAAH;OAEE,IAAC,SAAQ,CAAC,iBAAV;OAEA,IAAC,WAAU,CAAC,aAAZ,CAA0B,IAA1B;OACA,IAAC,SAAQ,CAAC,aAAV,CAAwB,IAAxB;OAEA,IAAC,SAAQ,CAAC,QAAV,CAAmB,IAAC,WAAU,CAAC,GAAZ,CAAgB,OAAhB,CAAnB;cACA,IAAC,WAAU,CAAC,IAAI,CAAC,KAAjB,GAAyB,KAR3B;;GAPU;;wBAiBZ,SAAQ;KAEN,IAAC,WAAU,CAAC,oBAAZ,CAAiC,IAAjC;KACA,IAAC,SAAQ,CAAC,oBAAV,CAA+B,IAA/B;KACA,IAAC,SAAQ,CAAC,iBAAV;KAGA,IAAC,SAAQ,CAAC,IAAI,CAAC,KAAf,GAAuB;KACvB,IAAC,SAAQ,CAAC,OAAV,GAAoB;KAGpB,OAAO,IAAC;KACR,OAAO,IAAC;KAGR,IAAC,QAAD,CAAS,oBAAT,EAA+B,IAA/B;KACA,IAAC,QAAD;YACA;GAjBM;;wBAmBR,SAAQ;YACN,IAAC,QAAD,CAAS,QAAT,EAAmB,IAAnB,EAAyB,IAAzB;GADM;;wBAGR,WAAU,SAAC,KAAD,EAAQ,OAAR;KACR,IAAC,WAAD,GAAc,KAAK,CAAC;KACpB,IAAC,SAAD,GAAY,KAAK,CAAC;KAElB,IAAG,CAAC,IAAC,WAAF,IAAgB,CAAC,IAAC,SAArB;AACE,cAAO,KADT;;KAIA,IAAG,IAAC,WAAU,CAAC,GAAZ,CAAgB,WAAhB,MAAgC,IAAC,SAAQ,CAAC,GAAV,CAAc,WAAd,CAAnC;AACE,cAAO,KADT;;KAIA,IAAG,IAAC,WAAU,CAAC,IAAI,CAAC,GAAjB,CAAqB,KAArB,MAA+B,IAAC,SAAQ,CAAC,IAAI,CAAC,GAAf,CAAmB,KAAnB,CAAlC;AACE,cAAO,KADT;;KAGA,IAAC,qBAAD;AACA,YAAO;GAhBC;;wBAkBV,uBAAsB;AAEpB;KAAA,IAAG,IAAC,WAAU,CAAC,GAAZ,CAAgB,WAAhB,MAAgC,KAAnC;OACE,QAAQ,IAAC;OACT,IAAC,SAAD,GAAY,IAAC;OACb,IAAC,WAAD,GAAc,MAHhB;;YAIA;GANoB;;wBAQtB,SAAQ;AACN;KAAA,MACE;OAAA,IAAI,IAAC,IAAD,CAAK,KAAL,CAAJ;OACA,WAAW,IAAC,WAAU,CAAC,IAAI,CAAC,GAAjB,CAAqB,KAArB,CADX;OAEA,eAAe,IAAC,WAAU,CAAC,IAAI,CAAC,GAAjB,CAAqB,KAArB,CAFf;OAGA,MAAM,IAAC,WAAU,CAAC,GAAZ,CAAgB,cAAhB,CAHN;OAIA,SAAS,IAAC,SAAQ,CAAC,IAAI,CAAC,GAAf,CAAmB,KAAnB,CAJT;OAKA,aAAa,IAAC,SAAQ,CAAC,IAAI,CAAC,GAAf,CAAmB,KAAnB,CALb;OAMA,IAAI,IAAC,SAAQ,CAAC,GAAV,CAAc,cAAd,CANJ;;YAOF;GATM;;;;IA1Ee,QAAQ,CAAC;;AAqFlC,OAAM,CAAC,OAAP,GAAiB;;;;;;;ACzFjB;GAAA;;;;AAAA,KAAI,oBAAQ,CAAR;;AACJ,YAAW,oBAAQ,CAAR;;AACX,WAAU,oBAAQ,CAAR;;AACV,mBAAkB,oBAAQ,CAAR;;AAEZ;;;;;;;;;;;;;;8BACJ,QAAO;;8BAEP,aAAY;KAEV,IAAC,QAAD,GAAW,IAAI,OAAJ;YAEX,IAAC,KAAD,CAAM,eAAN,EAAuB;cAAA,SAAC,CAAD;gBACrB,KAAC,OAAD,CAAQ,CAAR;OADqB;KAAA,QAAvB;GAJU;;8BAOZ,YAAW;AACT;KAAA,SAAS,IAAC,OAAM,CAAC,MAAR;KACT,CAAC,CAAC,MAAF,CAAS,MAAT,EAAiB,QAAjB;KACA,IAAC,MAAD,CAAO,EAAP;YACA,IAAC,QAAO,CAAC,KAAT;GAJS;;8BAMX,WAAU,SAAC,GAAD;YACR,IAAC,KAAD,CAAM,SAAC,GAAD;cAAS,GAAG,CAAC,GAAJ,CAAQ,KAAR,MAAkB;KAA3B,CAAN;GADQ;;8BAGV,SAAQ;YACN,IAAC,CAAC,IAAF,CAAO,SAAC,CAAD;cACL,CAAC,CAAC,MAAF;KADK,CAAP;GADM;;8BAIR,SAAQ,SAAC,KAAD,EAAQ,OAAR;KACN,IAAG,CAAC,OAAJ;OAAiB,UAAU,GAA3B;;KACA,OAAO,CAAC,OAAR,GAAkB,IAAC;KACnB,QAAQ,IAAC,cAAD,CAAe,KAAf,EAAsB,OAAtB;KACR,IAAG,CAAC,KAAJ;AACE,cAAO,MADT;;KAEA,IAAC,IAAD,CAAK,KAAL,EAAY,OAAZ;AACA,YAAO;GAPD;;8BASR,qBAAoB,SAAC,cAAD;AAElB;;OAFmB,iBAAiB;;KAEpC,IAAG,CAAC,cAAJ;OACE,iBAAiB,IAAC,iBAAD,GADnB;;KAIA,mBAAmB,IAAC,wBAAD,CAAyB,cAAzB;KACnB,KAAK,gBAAgB,CAAC;KACtB,KAAK,gBAAgB,CAAC;KAGtB,YAAY,IAAI,eAAJ,CACV;OAAA,mBAAmB,cAAnB;OACA,SAAS,IAAC,QADV;MADU;KAGZ,IAAC,IAAD,CAAK,SAAL;KAIA,uBAAuB;KACvB,mBAAmB;AACnB;;AAEE;AAAA;;AAEE;AAAA;;WACE,QAAQ,cAAc,CAAC,OAAf,CAAuB,UAAU,CAAC,UAAU,CAAC,IAA7C;WACR,QAAQ,cAAc,CAAC,OAAf,CAAuB,UAAU,CAAC,QAAQ,CAAC,IAA3C;WAER,IAAG,UAAS,CAAC,CAAV,IAAe,UAAS,CAAC,CAA5B;aAEE,iBAAiB,oBAAoB,CAAC,OAArB,CAA6B,UAA7B;aACjB,IAAG,mBAAkB,CAAC,CAAtB;eACE,oBAAoB,CAAC,IAArB,CAA0B,UAA1B;eACA,yBAAyB,UAAU,CAAC,MAAX;eACzB,sBAAsB,CAAC,WAAvB,GAAsC,UAAS,CAAC;eAChD,gBAAgB,CAAC,IAAjB,CAAsB,sBAAtB,EAJF;cAHF;;AAJF;AAFF;AAFF;AAkBA;;OACE,IAAI,CAAC,MAAL;AADF;KAIA,QACE;OAAA,MAAM,OAAN;OACA,YAAY,SADZ;OAEA,GAAG,EAFH;OAGA,GAAG,EAHH;;KAIF,IAAC,QAAD,CAAS,oBAAT,EAA+B,KAA/B,EAAsC,gBAAtC;AAEA,YAAO;GAjDW;;8BAmDpB,mBAAkB;AAChB;KAAA,iBAAiB;KAEjB,YAAY,EAAE,mBAAF,CAAsB,CAAC,GAAvB,CAA2B,aAA3B;KACZ,SAAS,CAAC,IAAV,CAAe;AACb;OAAA,OAAO,EAAE,IAAF,CAAO,CAAC,IAAR,CAAa,QAAb;cACP,cAAc,CAAC,IAAf,CAAoB,IAApB;KAFa,CAAf;AAIA,YAAO;GARS;;8BAUlB,0BAAyB,SAAC,cAAD;AAEvB;KAAA,QAAQ;KACR,QAAQ;KACR,QAAQ;KACR,QAAQ;KAGR,YAAY,EAAE,mBAAF;KAGZ,IAAG,SAAS,CAAC,MAAV,GAAmB,CAAnB,IAAwB,cAAc,CAAC,MAAf,KAAyB,CAApD;AACE,cAAO,MADT;;AAIA;;OAEE,QAAQ,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,IAAI,CAAC,GAAL,CAAS,GAAT,CAAhB;OACR,QAAQ,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,IAAI,CAAC,GAAL,CAAS,GAAT,CAAhB;OACR,QAAQ,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,IAAI,CAAC,GAAL,CAAS,GAAT,CAAhB;OACR,QAAQ,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,IAAI,CAAC,GAAL,CAAS,GAAT,CAAhB;AALV;KAQA,KAAK,CAAC,QAAQ,KAAT,IAAkB;KACvB,KAAK,CAAC,QAAQ,KAAT,IAAkB;AACvB,YAAO;OAAC,GAAG,EAAJ;OAAQ,GAAG,EAAX;;GAzBgB;;8BA2BzB,YAAW;YACT,IAAC,OAAD,CAAQ,IAAC,OAAT;GADS;;;;IAxHkB,QAAQ,CAAC;;AA2HxC,OAAM,CAAC,OAAP,GAAiB;;;;;;;AChIjB;GAAA;;;;AAAA,KAAI,oBAAQ,CAAR;;AACJ,YAAW,oBAAQ,CAAR;;AACX,SAAQ,oBAAQ,CAAR;;;AAER;;AAIM;;;;;;;;;;;6BACJ,WACE;KAAA,OAAO,EAAP;KACA,aAAa,EADb;KAEA,MAAM,OAFN;KAGA,KAAK,CAAC,CAHN;;;6BAKF,OAAM;;6BAEN,SAAQ;KACN,IAAC,aAAD,IAAiB;AACjB,YAAO,IAAC;GAFF;;6BAIR,aAAY,SAAC,OAAD;AACV;KAAA;KACA,IAAC,aAAD,GAAgB;KAChB,UAAU,OAAO,CAAC;KAElB,IAAG,IAAC,IAAD,CAAK,KAAL,MAAe,CAAC,CAAnB;OACE,IAAC,IAAD,CAAK,KAAL,EAAY,OAAO,CAAC,MAAR,EAAZ,EADF;;KAGA,IAAG,OAAO,CAAC,iBAAR,IAA6B,OAAO,CAAC,iBAAR,KAA6B,KAA7D;cACE,IAAC,kBAAD,CAAmB,OAAO,CAAC,iBAA3B,EADF;;GARU;;6BAWZ,oBAAmB,SAAC,cAAD;AACjB;KAAA,uBAAuB;AACvB;;AAEE;AAAA;;AAEE;AAAA;;WACE,QAAQ,cAAc,CAAC,OAAf,CAAuB,UAAU,CAAC,UAAU,CAAC,IAA7C;WACR,QAAQ,cAAc,CAAC,OAAf,CAAuB,UAAU,CAAC,QAAQ,CAAC,IAA3C;WAER,IAAG,UAAS,CAAC,CAAV,IAAe,UAAS,CAAC,CAA5B;aAEE,iBAAiB,oBAAoB,CAAC,OAArB,CAA6B,UAA7B;aACjB,IAAG,mBAAkB,CAAC,CAAtB;eACE,oBAAoB,CAAC,IAArB,CAA0B,UAA1B,EADF;cAHF;;AAJF;AAFF;AAFF;KAaA,IAAC,WAAU,CAAC,KAAZ,GAAoB,MAAM,CAAC,GAAP,CAAW,cAAX,EAA2B,SAAC,CAAD,EAAI,CAAJ;cAAU,CAAC,CAAC,MAAF;KAAV,CAA3B;YACpB,IAAC,WAAU,CAAC,WAAZ,GAA0B,MAAM,CAAC,GAAP,CAAW,oBAAX,EAAiC,SAAC,CAAD,EAAI,CAAJ;cAAU,CAAC,CAAC,MAAF;KAAV,CAAjC;GAhBT;;6BAkBnB,SAAQ;AACN;KAAA,MACE;OAAA,KAAK,IAAC,IAAD,CAAK,KAAL,CAAL;OACA,MAAM,IAAC,IAAD,CAAK,MAAL,CADN;OAEA,aAAa,IAAC,IAAD,CAAK,aAAL,CAFb;OAGA,OAAO,IAAC,IAAD,CAAK,OAAL,CAHP;;YAIF;GANM;;6BAQR,SAAQ;AAEN;KAAA,MAAM;YACN;GAHM;;;;IAlDoB,QAAQ,CAAC;;AAuDvC,OAAM,CAAC,OAAP,GAAiB;;;;;;;AC/DjB;;AAAM;;;GACJ,KAAC,oBAAD,GAAsB,SAAC,IAAD,EAAO,IAAP;AACpB;KAAA,IAAG,IAAI,CAAC,MAAL,KAAe,IAAI,CAAC,MAAvB;AACE,cAAO,MADT;;AAGA;;OACE,IAAG,IAAK,GAAL,KAAW,IAAK,GAAnB;AACE,gBAAO,MADT;;AADF;YAIA;GARoB;;;;;;AAUxB,OAAM,CAAC,OAAP,GAAiB","file":"ThreeNodes.Core.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"_\"), require(\"Backbone\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"_\", \"Backbone\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Core\"] = factory(require(\"_\"), require(\"Backbone\"));\n\telse\n\t\troot[\"ThreeNodes\"] = root[\"ThreeNodes\"] || {}, root[\"ThreeNodes\"][\"Core\"] = factory(root[\"_\"], root[\"Backbone\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"assets/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap dbdb3fd0a9f4344e877e","Nodes = require './nodes/collections/Nodes'\nGroupDefinitions = require './collections/GroupDefinitions'\n#GroupDefinitionView = require './views/GroupDefinitionView'\n\n#require 'jquery'\n\n#### App\nclass Core\n  @fields: {models:{}, views: {}}\n  @nodes: {models: {}, views: {}}\n\n  constructor: (options) ->\n    # Default settings\n    settings =\n      test: false\n      player_mode: false\n      direction: true\n    @settings = $.extend({}, settings, options)\n\n    # Initialize some core classes\n    @group_definitions = new GroupDefinitions([])\n    @nodes = new Nodes([], {settings: @settings})\n\n    # Create a group node when selected nodes are grouped\n    @group_definitions.bind(\"definition:created\", @nodes.createGroup)\n\n    # When a group definition is removed delete all goup nodes using this definition\n    @group_definitions.bind(\"remove\", @nodes.removeGroupsByDefinition)\n\n  @addFieldType: (fieldName, field) ->\n    Core.fields.models[fieldName] = field\n    return true\n\n  @addFieldView: (fieldName, fieldView) ->\n    Core.fields.views[fieldName] = fieldView\n    return true\n\n  @addNodeType: (nodeName, nodeType) ->\n    Core.nodes.models[nodeName] = nodeType\n    return true\n\n  @addNodeView: (viewName, nodeView) ->\n    Core.nodes.views[viewName] = nodeView\n    return true\n\n  setNodes: (json_object) ->\n    @nodes.removeAll()\n    # First recreate the group definitions\n    if json_object.groups\n      for grp_def in json_object.groups\n        @group_definitions.create(grp_def)\n\n    # Create the nodes\n    for node in json_object.nodes\n      if node.type != \"Group\"\n        # Create a simple node\n        @nodes.createNode(node)\n      else\n        # If the node is a group we first need to get the previously created group definition\n        def = @group_definitions.getByGid(node.definition_id)\n        if def\n          node.definition = def\n          grp = @nodes.createGroup(node)\n        else\n          console.log \"can't find the GroupDefinition: #{node.definition_id}\"\n\n    # Create the connections\n    for connection in json_object.connections\n      @nodes.createConnectionFromObject(connection)\n\n    @nodes.indexer.uid = json_object.uid\n    delay = (ms, func) -> setTimeout func, ms\n    delay 1, => @nodes.renderAllConnections()\n\nmodule.exports = Core\n\n\n\n// WEBPACK FOOTER //\n// ./threenodes/Core.coffee","_ = require 'Underscore'\nBackbone = require 'Backbone'\nIndexer = require 'threenodes/utils/Indexer'\nConnections = require 'threenodes/connections/collections/Connections'\n\nclass Nodes extends Backbone.Collection\n\n  initialize: (models, options) =>\n    @settings = options.settings\n    self = this\n    # save material nodes in an array so they can be quickly rebuild\n    @materials = []\n\n    # Each node collections has it's own indexer, used to get unique id\n    @indexer = new Indexer()\n\n    # Create the connections collection\n    @connections = new Connections([], {indexer: @indexer})\n\n    # Parent node, used for groups\n    @parent = options.parent\n\n    @connections.bind \"add\", (connection) ->\n      self.trigger \"nodeslist:rebuild\", self\n\n    @bind \"remove\", (node) =>\n      indx = @materials.indexOf(node)\n      if indx != -1\n        @materials.splice(indx, 1)\n      self.trigger \"nodeslist:rebuild\", self\n\n    @bind \"RebuildAllShaders\", () =>\n      for node in @materials\n        node.rebuildShader()\n\n    @connections.bind \"remove\", (connection) ->\n      self.trigger \"nodeslist:rebuild\", self\n\n    @bind \"add\", (node) ->\n      if node.is_material && node.is_material == true\n        @materials.push(node)\n\n      self.trigger \"nodeslist:rebuild\", self\n\n    @bind \"createConnection\", (field1, field2) =>\n      @connections.create\n        from_field: field1\n        to_field: field2\n\n  clearWorkspace: () =>\n    @removeConnections()\n    @removeAll()\n    $(\"#webgl-window canvas\").remove()\n    @materials = []\n    @indexer.reset()\n    return this\n\n  destroy: () =>\n    @removeConnections()\n    @removeAll()\n    delete @materials\n    delete @indexer\n    delete @connections\n\n  bindTimelineEvents: (timeline) =>\n    if @timeline\n      @timeline.off(\"tfieldsRebuild\", @showNodesAnimation)\n      @timeline.off(\"startSound\", @startSound)\n      @timeline.off(\"stopSound\", @stopSound)\n\n    @timeline = timeline\n    @timeline.on(\"tfieldsRebuild\", @showNodesAnimation)\n    @timeline.on(\"startSound\", @startSound)\n    @timeline.on(\"stopSound\", @stopSound)\n\n  find: (node_name) =>\n    return this.where({name: node_name})\n\n  createNode: (options) =>\n    # If not is a string instead of an object then take the option as the node type\n    if $.type(options) == \"string\"\n      options = {type: options}\n\n    # Save references of the application settings and timeline in the node model\n    options.timeline = @timeline\n    options.settings = @settings\n\n    # Save a reference of the nodes indexer\n    options.indexer = @indexer\n\n    options.parent = @parent\n\n    # Print error if the node type is not found and return false\n    if !ThreeNodes.Core.nodes.models[options.type]\n      console.error(\"Node type doesn't exists: \" + options.type)\n      return false\n\n    # Create the node and pass the options\n    n = new ThreeNodes.Core.nodes.models[options.type](options)\n\n    # Add the node to the collection\n    @add(n)\n    n\n\n  render: () =>\n    # Define temporary objects to index the nodes\n    invalidNodes = {}\n    terminalNodes = {}\n\n    # Flatten the array of nodes.\n    # Nodes from groups will appear in the invalidNodes and/or terminalNodes too\n    # Get all root nodes and nodes requiring an update\n    buildNodeArrays = (nodes) ->\n      for node in nodes\n        if node.hasOutConnection() == false || node.auto_evaluate || node.delays_output\n          terminalNodes[node.attributes[\"nid\"] + \"/\" + node.attributes[\"gid\"]] = node\n        invalidNodes[node.attributes[\"nid\"] + \"/\" + node.attributes[\"gid\"]] = node\n        if node.nodes\n          buildNodeArrays(node.nodes.models)\n    buildNodeArrays(@models)\n\n    # Update a node and his parents\n    evaluateSubGraph = (node) ->\n      upstreamNodes = node.getUpstreamNodes()\n      for upnode in upstreamNodes\n        if invalidNodes[upnode.attributes[\"nid\"] + \"/\" + upnode.attributes[\"gid\"]] && !upnode.delays_output\n          evaluateSubGraph(upnode)\n      if node.dirty || node.auto_evaluate\n        node.compute()\n        node.dirty = false\n        node.fields.setFieldInputUnchanged()\n\n      delete invalidNodes[node.attributes[\"nid\"] + \"/\" + node.attributes[\"gid\"]]\n      true\n\n    # Process all root nodes which require an update\n    for nid of terminalNodes\n      if invalidNodes[nid]\n        evaluateSubGraph(terminalNodes[nid])\n    true\n\n  createConnectionFromObject: (connection) =>\n    # Get variables from their id\n    from_gid = if connection.from_node_gid then connection.from_node_gid.toString() else \"-1\"\n    from_node = @getNodeByNid(connection.from_node.toString(), from_gid)\n    from = from_node.fields.outputs[connection.from.toString()]\n    to_gid = if connection.to_node_gid then connection.to_node_gid.toString() else \"-1\"\n    to_node = @getNodeByNid(connection.to_node.toString(), to_gid)\n    to = to_node.fields.inputs[connection.to.toString()]\n\n    # If a field is missing try to switch from/to\n    if !from || !to\n      tmp = from_node\n      from_node = to_node\n      to_node = tmp\n      from = from_node.fields.outputs[connection.to.toString()]\n      to = to_node.fields.inputs[connection.from.toString()]\n\n    c = @connections.create\n        from_field: from\n        to_field: to\n        cid: connection.id\n\n    c\n\n  createGroup: (model, external_objects = []) =>\n    # create the group node\n    grp = @createNode(model)\n\n    # Recreate the external connections\n    for connection in external_objects\n      from = false\n      to = false\n      if connection.to_subfield\n        from = @getNodeByNid(connection.from_node).fields.getField(connection.from, true)\n        target_node = @getNodeByNid(connection.to_node)\n        if target_node\n          to = target_node.fields.getField(connection.to, false)\n      else\n        target_node = @getNodeByNid(connection.from_node)\n        if target_node\n          from = target_node.fields.getField(connection.from, true)\n        to = @getNodeByNid(connection.to_node).fields.getField(connection.to)\n\n      c = @connections.create\n        from_field: from\n        to_field: to\n\n    return grp\n\n  removeGroupsByDefinition: (def) =>\n    _nodes = @models.concat()\n    _.each _nodes, (node) -> if node.definition && node.definition.gid == def.gid then node.remove()\n\n  renderAllConnections: () =>\n    @connections.render()\n\n  removeConnection: (c) ->\n    @connections.remove(c)\n\n  getNodeByNid: (nid, gid = \"-1\") =>\n    for node in @models\n      if node.get(\"nid\").toString() == nid.toString()\n        if gid == \"-1\" || node.get(\"gid\").toString() == gid.toString()\n          return node\n      # special case for group\n      if node.nodes\n        res = node.nodes.getNodeByNid(nid, gid)\n        if res then return res\n\n    return false\n\n  showNodesAnimation: () =>\n    @invoke \"showNodeAnimation\"\n\n  startSound: (time) =>\n    @each (node) -> if node.playSound instanceof Function then node.playSound(time)\n\n  stopSound: () =>\n    @each (node) -> if node.stopSound instanceof Function then node.stopSound()\n\n  removeSelectedNodes: () ->\n    for node in $(\".node.ui-selected\")\n      $(node).data(\"object\").remove()\n\n  removeAll: () ->\n    $(\"#tab-attribute\").html(\"\")\n    models = @models.concat()\n    _.invoke models, \"remove\"\n    @reset([])\n    true\n\n  removeConnections: () ->\n    @connections.removeAll()\n\nmodule.exports = Nodes\n\n\n\n// WEBPACK FOOTER //\n// ./threenodes/nodes/collections/Nodes.coffee","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"_\"\n// module id = 2\n// module chunks = 0 1 2 3","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"Backbone\"\n// module id = 3\n// module chunks = 0 1 2 3","class Indexer\n  constructor: () ->\n    # Define a \"unique id\" property\n    @uid = 0\n\n  getUID: (increment = true) ->\n    if increment\n      return @uid += 1\n    else\n      return @uid\n\n  reset: () ->\n    @uid = 0\n\nmodule.exports = Indexer\n\n\n\n// WEBPACK FOOTER //\n// ./threenodes/utils/Indexer.coffee","Backbone = require 'Backbone'\nConnection = require 'threenodes/connections/models/Connection'\n\nclass Connections extends Backbone.Collection\n  model: Connection\n\n  initialize: (models, options) =>\n    @indexer = options.indexer\n    @bind \"connection:removed\", (c) => @remove(c)\n    super\n\n  render: () =>\n    @each (c) -> c.render()\n\n  create: (model, options) =>\n    if !options then options = {}\n    model.indexer = @indexer\n    model = @_prepareModel(model, options)\n    if !model\n      return false\n    @add(model, options)\n    return model\n\n  removeAll: () =>\n    @remove(@models)\n\nmodule.exports = Connections\n\n\n\n// WEBPACK FOOTER //\n// ./threenodes/connections/collections/Connections.coffee","Backbone = require 'Backbone'\nIndexer = require 'threenodes/utils/Indexer'\n\n### Connection model ###\nclass Connection extends Backbone.Model\n  # Create a static indexer used if the connection is not part of a nodes collection (tests)\n  @STATIC_INDEXER: new Indexer()\n\n  defaults:\n    \"cid\": -1\n\n  sync: () =>\n\n  initialize: (options) =>\n    @options = options\n    indexer = options.indexer || Connection.STATIC_INDEXER\n\n    # Set a unique connection id\n    if @get(\"cid\") == -1 then @set({\"cid\": indexer.getUID()})\n\n    if @isValid()\n      # remove existing input connection since inputs only have one connection\n      @to_field.removeConnections()\n      # add the connection to each fields\n      @from_field.addConnection(this)\n      @to_field.addConnection(this)\n      # dispatch the new value\n      @to_field.setValue(@from_field.get(\"value\"))\n      @from_field.node.dirty = true\n\n  remove: =>\n    # Unregister the connection from the fields\n    @from_field.unregisterConnection(this)\n    @to_field.unregisterConnection(this)\n    @to_field.removeConnections()\n\n    # Set the \"to\" node dirty so it is reprocessed next time\n    @to_field.node.dirty = true\n    @to_field.changed = true\n\n    # Delete variable reference for garbage collection\n    delete @from_field\n    delete @to_field\n\n    # Trigger the removed event and call destroy()\n    @trigger \"connection:removed\", this\n    @destroy()\n    false\n\n  render: () =>\n    @trigger(\"render\", this, this)\n\n  validate: (attrs, options) =>\n    @from_field = attrs.from_field\n    @to_field = attrs.to_field\n    # make sure we have input and output\n    if !@from_field || !@to_field\n      return true\n\n    # never connect 2 outputs or 2 inputs\n    if @from_field.get(\"is_output\") == @to_field.get(\"is_output\")\n      return true\n\n    # never connect in/out from the same node\n    if @from_field.node.get('nid') == @to_field.node.get('nid')\n      return true\n\n    @switchFieldsIfNeeded()\n    return false\n\n  switchFieldsIfNeeded: () =>\n    # Switch input and output if they are given in the wrong order\n    if @from_field.get(\"is_output\") == false\n      f_out = @to_field\n      @to_field = @from_field\n      @from_field = f_out\n    @\n\n  toJSON: () ->\n    res =\n      id: @get(\"cid\")\n      from_node: @from_field.node.get(\"nid\")\n      from_node_gid: @from_field.node.get(\"gid\")\n      from: @from_field.get(\"machine_name\")\n      to_node: @to_field.node.get(\"nid\")\n      to_node_gid: @to_field.node.get(\"gid\")\n      to: @to_field.get(\"machine_name\")\n    res\n\nmodule.exports = Connection\n\n\n\n// WEBPACK FOOTER //\n// ./threenodes/connections/models/Connection.coffee","_ = require 'Underscore'\nBackbone = require 'Backbone'\nIndexer = require 'threenodes/utils/Indexer'\nGroupDefinition = require 'threenodes/models/GroupDefinition'\n\nclass GroupDefinitions extends Backbone.Collection\n  model: GroupDefinition\n\n  initialize: () =>\n    # The group definitions have their own indexer, used to get unique id\n    @indexer = new Indexer()\n\n    @bind \"group:removed\", (c) =>\n      @remove(c)\n\n  removeAll: () =>\n    models = @models.concat()\n    _.invoke models, \"remove\"\n    @reset([])\n    @indexer.reset()\n\n  getByGid: (gid) =>\n    @find (def) -> def.get(\"gid\") == gid\n\n  render: () =>\n    @.each (c) ->\n      c.render()\n\n  create: (model, options) =>\n    if !options then options = {}\n    options.indexer = @indexer\n    model = @_prepareModel(model, options)\n    if !model\n      return false\n    @add(model, options)\n    return model\n\n  groupSelectedNodes: (selected_nodes = false) =>\n    # selected_nodes parameter is only given in GroupTest\n    if !selected_nodes\n      selected_nodes = @getSelectedNodes()\n\n    # compute the center node position\n    average_position = @getNodesAveragePosition(selected_nodes)\n    dx = average_position.x\n    dy = average_position.y\n\n    # Create a new GroupDefinition from the selected nodes and connections\n    group_def = new GroupDefinition\n      fromSelectedNodes: selected_nodes\n      indexer: @indexer\n    @add(group_def)\n\n    # Save the connection going out or in the group of nodes\n    # the connections have one extenal node linked to one selected node\n    external_connections = []\n    external_objects = []\n    for node in selected_nodes\n      # check each node fields\n      for field in node.fields.models\n        # loop each connections since we can have multiple out connections\n        for connection in field.connections\n          indx1 = selected_nodes.indexOf(connection.from_field.node)\n          indx2 = selected_nodes.indexOf(connection.to_field.node)\n          # if \"from\" OR \"out\" is external add it\n          if indx1 == -1 || indx2 == -1\n            # don't add it twice\n            already_exists = external_connections.indexOf(connection)\n            if already_exists == -1\n              external_connections.push(connection)\n              connection_description = connection.toJSON()\n              connection_description.to_subfield = (indx1 == -1)\n              external_objects.push(connection_description)\n\n    # remove the nodes\n    for node in selected_nodes\n      node.remove()\n\n    # Create a ThreeNodes.nodes.Group\n    model =\n      type: \"Group\"\n      definition: group_def\n      x: dx\n      y: dy\n    @trigger(\"definition:created\", model, external_objects)\n\n    return group_def\n\n  getSelectedNodes: () ->\n    selected_nodes = []\n    # Selected nodes jquery selector\n    $selected = $(\".node.ui-selected\").not(\".node .node\")\n    $selected.each () ->\n      node = $(this).data(\"object\")\n      selected_nodes.push(node)\n\n    return selected_nodes\n\n  getNodesAveragePosition: (selected_nodes) ->\n    # Get the average position of selected nodes\n    min_x = 0\n    min_y = 0\n    max_x = 0\n    max_y = 0\n\n    # Selected nodes jquery selector\n    $selected = $(\".node.ui-selected\")\n\n    # Stop directly if there is no node selected\n    if $selected.length < 1 && selected_nodes.length == 0\n      return false\n\n    # Get selected nodes\n    for node in selected_nodes\n      # get the x/y node min and max to place the new node at the center\n      min_x = Math.min(min_x, node.get(\"x\"))\n      max_x = Math.max(max_x, node.get(\"x\"))\n      min_y = Math.min(min_y, node.get(\"y\"))\n      max_y = Math.max(max_y, node.get(\"y\"))\n\n    # compute the center node position\n    dx = (min_x + max_x) / 2\n    dy = (min_y + max_y) / 2\n    return {x: dx, y: dy}\n\n  removeAll: () =>\n    @remove(@models)\n\nmodule.exports = GroupDefinitions\n\n\n\n// WEBPACK FOOTER //\n// ./threenodes/collections/GroupDefinitions.coffee","_ = require 'Underscore'\nBackbone = require 'Backbone'\nUtils = require 'threenodes/utils/Utils'\n\n### GroupDefinition model ###\n\n# A GroupDefinition defines what is inside a group node, subnodes and internal connections.\n\nclass GroupDefinition extends Backbone.Model\n  defaults:\n    nodes: []\n    connections: []\n    name: \"Group\"\n    gid: -1\n\n  sync: () =>\n\n  getUID: () =>\n    @internal_uid += 1\n    return @internal_uid\n\n  initialize: (options) =>\n    super\n    @internal_uid = 0\n    indexer = options.indexer\n\n    if @get(\"gid\") == -1\n      @set(\"gid\", indexer.getUID())\n\n    if options.fromSelectedNodes && options.fromSelectedNodes != false\n      @fromSelectedNodes(options.fromSelectedNodes)\n\n  fromSelectedNodes: (selected_nodes) =>\n    internal_connections = []\n    for node in selected_nodes\n      # check each node fields\n      for field in node.fields.models\n        # loop each connections since we can have multiple out connections\n        for connection in field.connections\n          indx1 = selected_nodes.indexOf(connection.from_field.node)\n          indx2 = selected_nodes.indexOf(connection.to_field.node)\n          # if \"from\" AND \"out\" are internal add it\n          if indx1 != -1 && indx2 != -1\n            # don't add it twice\n            already_exists = internal_connections.indexOf(connection)\n            if already_exists == -1\n              internal_connections.push(connection)\n    @attributes.nodes = jQuery.map(selected_nodes, (n, i) -> n.toJSON())\n    @attributes.connections = jQuery.map(internal_connections, (c, i) -> c.toJSON())\n\n  toJSON: () ->\n    res =\n      gid: @get(\"gid\")\n      name: @get(\"name\")\n      connections: @get(\"connections\")\n      nodes: @get(\"nodes\")\n    res\n\n  toCode: () ->\n    # todo: export group definition to code\n    res = \"\"\n    res\n\nmodule.exports = GroupDefinition\n\n\n\n// WEBPACK FOOTER //\n// ./threenodes/models/GroupDefinition.coffee","class Utils\n  @flatArraysAreEquals: (arr1, arr2) ->\n    if arr1.length != arr2.length\n      return false\n\n    for k, i in arr1\n      if arr1[i] != arr2[i]\n        return false\n\n    true\n\nmodule.exports = Utils\n\n\n\n// WEBPACK FOOTER //\n// ./threenodes/utils/Utils.coffee"],"sourceRoot":""}